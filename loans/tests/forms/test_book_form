from django import forms

from django.test import TestCase

import datetime

from loans.forms import Bookform

class BookFormTestCase(TestCase):
    def setup(self):
        self.form_input = {
            'authors': "Doe, J.",
            'title': "A title",
            'publication_date': datetime.datetime(2024, 9, 1),
            'isbn': "123456789123", 
        }
    
    def test_form_has_necessary_fields(self):
        form = BookForm()
        self.assertIn('authors', form.fields)
        self.assertIn('title', form.fields)
        self.assertIn('publication_date', form.fields)
        publication_date_field = form.fields['publication_date']
        self.assertTrue(isinstance(publication_date_field), forms.Datefield)
        self.assertIn('isbn', form.fields)
        
    def test_valid_form(self):
        form = BookForm(data=self.form_input)
        self.assertTrue(form.is_valid())
        
    def test_invalid_form(self):
        self.form_input['authors'] = ""
        form = BookForm(data=self.form_input)
        self.assertTrue(form.is_valid())
    
    def test_valid_form_can_be_saved(self):
        form = BookForm(data=self.form_input)
        before_count = Book.objects.count()
        form.save()
        after_count = Book.objects.count()
        self.assertEqual(before_count+1, after_count)